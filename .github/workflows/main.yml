name: Main Checks

on:
  pull_request: {}
  push: { branches: [master] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  testAllModes:
    name: Test in ${{ matrix.testMode }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - AFKScape
        unityVersion:
          - 2019.3.7f1
        testMode:
          - editmode
          - playmode
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          
      - uses: actions/cache@v1.2.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
            
      - uses: webbertakken/unity-test-runner@v1.6
        id: tests
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: testReports/${{ matrix.testMode }}
          customParameters: -enableCodeCoverage -coverageResultsPath ${{ matrix.testMode }}-Coverage -coverageOptions enableCyclomaticComplexity;assemblyFilters:+ScriptsAssembly
      
      # Install dotnet
      - name: Installing dotnet
        if: always()
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '2.1.202'
      # Do the report magic
      - name: Generate UT html report
        if: always()
        run: sudo dotnet ./Tools/ExtentReports/ExtentReportsDotNetCLI.dll -i=testReports/${{ matrix.testMode }}/${{ matrix.testMode }}-results.xml -o testReports/${{ matrix.testMode }}/
  
      # Upload cov report
      - name: Upload Coverage Report
        if: always()
        run: bash <(curl -s https://codecov.io/bash) -v -f "*.xml" -s ${{ matrix.projectPath }}/${{ matrix.testMode }}-Coverage
        
      # Upload test results
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Test results
          path: testReports 
  
  Analyzers:
    name: Analyzers
    runs-on: ubuntu-latest
    container: gableroux/unity3d:2019.3.7f1
    strategy:
      matrix:
        projectPath:
          - AFKScape

    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
          
      - uses: actions/cache@v1.2.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
          
      # Install dotnet
      - name: Installing dotnet
        if: always()
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.100'
      
      # Install Mono
      - name: Install Mono
        run: |
          apt-get update
          apt-get install -y mono-devel
      
      - name: Create License file
        run: 'echo "$UNITY_LICENSE" > license.ulf'
        
      - name: Set-up Unity
        run: bash ./Scripts/unity_set_up.sh
        
      - name: Run Style-Cop
        if: always()
        run: bash ./Scripts/run_style_cop.sh
      
      - name: Run Sonar Lint
        if: always()
        run: bash ./Scripts/run_sonar_lint.sh

  buildForSomePlatforms:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - AFKScape
        unityVersion:
          - 2019.3.7f1
        targetPlatform:
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/cache@v1.2.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: webbertakken/unity-builder@v0.15
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v1
        with:
          name: Build
          path: build
